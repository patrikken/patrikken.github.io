---
title: "ASP.NET (MVC e-commerce)"
subtitle: "Introduction à la programmation web basée sur le '_pattern_' MVC."

author: "Patrik Kenfack"
format: 
  revealjs:
    auto-stretch: false
    theme: simple
---
## Plan du cours

- Rappel sur la programmation web
- L'architecture MVC 
  - Motivations
  - Composants de architecture MVC
  - Exemple de mise en œuvre
- Rôle des technologies utilisées au dans ce cours
  - ASP.NET; Entity FrameWork (EF); MS SQLServer; React; API web
--- 

## Objectifs

<h5> À l'issue de ce cours l'étudiant doit être capable de: </h5>
 
- Comprendre les avantages et inconvénients de l'architecture MVC.
- Connaître le rôle de chaque composant du MVC (Model, View, Contoller).
- Connaître les normes et contraintes de l'architecture MVC dans le développement web. 
- Identifier le rôle de différentes technologies dans l'architecture MVC.  

 
---

## La programmation web (rappel)

- Analyse du système
- Interfaces utilisateur et interactions (design)
- Structure de la base de données
- Code coté serveur (logique métier)
- Code coté client (logique métier) 

--- 

### La programmation web
![](./images/Overview_web_programming-Page-2.webp){.absolute top="95" left="270" width="490"}
 

--- 

### La programmation web
![](./images/Overview_web_programming-Page-1.webp){.absolute top="95" right="28" width="1400"} 

## Prérequis

- Création de sites web statiques avec HTML5, CSS
- Programmation côté client avec Javascript/JQuery
- Programmation orientée objets
- Manupilation des bases de données relationnelles

# Motivations de l'architecture MVC.

## Example

Page ASP présentant la liste des produits.
``` cs
<%@ Page Language="C#" AutoEventWireup="true" CodeFile="Default.aspx.cs" Inherits="_Default" %>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Product List</title>
</head>
<body>
    <h1>Product List</h1>
    <asp:GridView ID="GridView1" runat="server"></asp:GridView>

    <h2>Add a New Product</h2>
    <form id="form1" runat="server">
        <label for="txtProductName">Product Name:</label>
        <asp:TextBox ID="txtProductName" runat="server"></asp:TextBox>
        <br />
        <label for="txtPrice">Price:</label>
        <asp:TextBox ID="txtPrice" runat="server"></asp:TextBox>
        <br />
        <asp:Button ID="btnAddProduct" runat="server" Text="Add Product" OnClick="btnAddProduct_Click" />
    </form>
</body>
</html>
```
>Default.aspx
---

## Example

Code gérant la page.
``` c#
using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;

public partial class _Default : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            LoadProducts();
        }
    }

    protected void LoadProducts()
    {
        string connString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
        string query = "SELECT ProductID, ProductName, Price FROM Products";

        using (SqlConnection conn = new SqlConnection(connString))
        {
            SqlCommand cmd = new SqlCommand(query, conn);
            conn.Open();

            SqlDataAdapter da = new SqlDataAdapter(cmd);
            DataTable dt = new DataTable();
            da.Fill(dt);

            GridView1.DataSource = dt;
            GridView1.DataBind();
        }
    }

    protected void btnAddProduct_Click(object sender, EventArgs e)
    {
        string productName = txtProductName.Text;
        decimal price;

        if (string.IsNullOrWhiteSpace(productName) || !decimal.TryParse(txtPrice.Text, out price))
        {
            // Display error message (in a real-world scenario)
            return;
        }

        string connString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
        string query = "INSERT INTO Products (ProductName, Price) VALUES (@ProductName, @Price)";

        using (SqlConnection conn = new SqlConnection(connString))
        {
            SqlCommand cmd = new SqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@ProductName", productName);
            cmd.Parameters.AddWithValue("@Price", price);
            conn.Open();
            cmd.ExecuteNonQuery();
        }

        // Reload the product list
        LoadProducts();
    }
}
```
>Default.aspx.cs

---

### Quels sont les inconvénients de cette approche ? 

::: {.incremental}

- Code fortement couplé
  - Peu réutilisable, duplication de code.
- Difficile à maintenir 
  - La modification de l'affichage/recherche de produits peut engendrer  des effets secondaires imprévus (Modification du même fichier). 
- Test unitaire difficile 
  - Il faut lire toute la page pour tester une fonctionnalité spécifique.
- Difficulté de mise à l'échelle 
  - La complexité des fichiers augmente  et rend l'application plus difficile à faire évoluer.
:::

# Le pattern MVC

## Le pattern MVC

- Le pattern MVC est une *architecture logicielle* qui sépare **l'interface utilisateur**, le **stockage des données** et la **logique métier** en trois composants distincts:
  - Le Modèle
  - La Vue 
  - Le Contrôleur

---

### Le Modèle

- S'occupe de la logique de données: structure de données; objets et méthodes (class); Logique métier.
- Manipulation la base de données.
---

### La Vue

-  Interface utilisateur et ce que voit l'utilisateur.
-  Exclusivement responsable de la présentation des données.
-  Pas d'accès direct à la base de données.

---

### Le Contrôleur

- Se trouve entre la vue et le modèle.
- Reçoit et traite les requêtes des utilisateurs.
---


### Une vue globale

![](./images/Overview_web_programming-Page-4.webp){.absolute top="75" left="200"} 

---

# MCV: exemple de mise en œuvre 

---

### Le Modèle 
La structure de données

```c#
public class Product
{
    public int ProductID { get; set; }
    public string ProductName { get; set; }
    public decimal Price { get; set; }
}
```
> Product.cs
---

### Le Modèle 
La couche d'accès aux données

```c#
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;

public class ProductRepository
{
    private string connectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;

    public List<Product> GetAllProducts()
    {
        List<Product> products = new List<Product>();
        string query = "SELECT ProductID, ProductName, Price FROM Products";

        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            SqlCommand cmd = new SqlCommand(query, conn);
            conn.Open();

            SqlDataReader reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                products.Add(new Product
                {
                    ProductID = reader.GetInt32(0),
                    ProductName = reader.GetString(1),
                    Price = reader.GetDecimal(2)
                });
            }
        }
        return products;
    }

    public void AddProduct(Product product)
    {
        string query = "INSERT INTO Products (ProductName, Price) VALUES (@ProductName, @Price)";

        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            SqlCommand cmd = new SqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@ProductName", product.ProductName);
            cmd.Parameters.AddWithValue("@Price", product.Price);
            conn.Open();
            cmd.ExecuteNonQuery();
        }
    }
}
```
> ProductRepository.cs

---

### Le Contrôleur

```c#
using System.Collections.Generic;
using System.Web.Mvc;

public class ProductsController : Controller
{
    private ProductRepository productRepository = new ProductRepository();

    public ActionResult Index()
    {
        List<Product> products = productRepository.GetAllProducts();
        return View(products);
    }

    [HttpPost]
    public ActionResult AddProduct(string productName, string price)
    {
        decimal parsedPrice;
        if (!string.IsNullOrWhiteSpace(productName) && decimal.TryParse(price, out parsedPrice))
        {
            Product product = new Product
            {
                ProductName = productName,
                Price = parsedPrice
            };
            productRepository.AddProduct(product);
        }

        return RedirectToAction("Index");
    }
}
```
>ProductsController.cs

--- 

### La Vue 

```c#
@modèle List<Product>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Product List</title>
</head>
<body>
    <h1>Product List</h1>
    <table border="1">
        <tr>
            <th>ID</th>
            <th>Product Name</th>
            <th>Price</th>
        </tr>
        @foreach (var product in Model)
        {
            <tr>
                <td>@product.ProductID</td>
                <td>@product.ProductName</td>
                <td>@product.Price</td>
            </tr>
        }
    </table>

    <h2>Add a New Product</h2>
    <form method="post" action="/Products/AddProduct">
        <label for="productName">Product Name:</label>
        <input type="text" id="productName" name="productName" />
        <br />
        <label for="price">Price:</label>
        <input type="text" id="price" name="price" />
        <br />
        <input type="submit" value="Add Product" />
    </form>
</body>
</html>
```
>Index.cshtml

---
<h4>À la lumière de l'exemple de mise en œuvre, identifiez 3 avantages et 3 inconvénients de l'architecture MVC.</h4>